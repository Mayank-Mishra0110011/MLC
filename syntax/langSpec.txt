Keywords
  brk (break), const, cont (continue), else, elif, enum, 
  false, var, pub (public), priv (private), prot (protected), 
  super, while, from - to (for loop), return, impl (implements), 
  static, self, true, typeOf, instanceOf, do, vr (virtual), 
  abs (abstract), yield, final, try, catch, 
  finally, throw, throws, ext (extends), class, switch, case, 
  new, delete, default, goto, exp (export), imp (import), 
  iface (interface), mixin, unsafe, fx, null, Object, Exception, struct, union

fx a(i32) => {
  
}

fx (i32, string) => {
  
} 

class A {
  #default visibility is public
  fx a() {

  }
}

class B ext A {
  #no def of a() calls parent class a()
}

class C ext A {
  @over
  pub fx a() {
    /#
      trying to implement runtime polymorphism
      wont work
      to override a parent class method the method in parent class must be defined with a vr (virtual) Keyword
      ex: pub vr fx a() {}
    #/
  }
}

ls = [new A(), new B(), new C()];

from 0 to ls.len {
  ls[i].a();
}

Object operators, methods && properties
  .class => return classname
  .clone(freeze=false) => return shallow copy of object
  .equal(object) => return true : false
  = return cloned object
  == object return true : false
  .freeze() => prevent further object modification
  frozen return true : false
  .toStr() => return stringified object

Operators
    +    &     +=    &=     &&    ==    !=    (    )
    -    |     -=    |=     ||    <     <=    [    ]
    *    ^     *=    ^=     <-    >     >=    {    }
    /    <<    /=    <<=    ++    =     ?    ,    ;
    %    >>    %=    >>=    --    !     ...   .    :
         &^          &^=

Extension
  .mlc

Make language hybrid typed
If the data type of a variable is specified while declaring it:
  The type cannot be changed throughout the program
If the type is not explicitly mentioned:
  The variable may type juggle

Implement closures

Implement garbage collector

Semicolon termination

#named function
fx functionName(...args) => returnType {
  /#
    Specifying a return type is optional 
    Default return type is null
    If a type is specified, the function must return a value of that type
    Compile time checks for the above, throw runtime exception 
    code;
  #/
}
  
#anonymous function
fx (...args) => returnType {
  #if the binded object is dropped, remove function from memory
}

main function will be the entry point of the program
By default a program is compiled in:
  unsafe mode (no garbage collection):
    to enable gc add the line "#gc on" at the top of the file that contains
    the main function.
    gc cannot be turned on/off inbetween the program, it's state must be defined 
    on the 1st line of the file that contains the main function.
    any other "#gc on/off" lines will be ignored by the compiler.
    using pointers when unsafe mode is off is not allowed.
    pointers can be used by making use of the unsafe keyword or 
    inside an unsafe block when the unsafe mode is off.